#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace KidApp
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="KidApp")]
	public partial class KidAppDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertEngResult(EngResult instance);
    partial void UpdateEngResult(EngResult instance);
    partial void DeleteEngResult(EngResult instance);
    partial void InsertImage(Image instance);
    partial void UpdateImage(Image instance);
    partial void DeleteImage(Image instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertVieResult(VieResult instance);
    partial void UpdateVieResult(VieResult instance);
    partial void DeleteVieResult(VieResult instance);
    #endregion
		
		public KidAppDBDataContext() : 
				base(global::KidApp.Properties.Settings.Default.KidAppConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public KidAppDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public KidAppDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public KidAppDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public KidAppDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<EngResult> EngResults
		{
			get
			{
				return this.GetTable<EngResult>();
			}
		}
		
		public System.Data.Linq.Table<Image> Images
		{
			get
			{
				return this.GetTable<Image>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<VieResult> VieResults
		{
			get
			{
				return this.GetTable<VieResult>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EngResult")]
	public partial class EngResult : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _engId;
		
		private string _eng1;
		
		private string _eng2;
		
		private string _eng3;
		
		private System.Nullable<bool> _active;
		
		private EntityRef<Image> _Image;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnengIdChanging(string value);
    partial void OnengIdChanged();
    partial void Oneng1Changing(string value);
    partial void Oneng1Changed();
    partial void Oneng2Changing(string value);
    partial void Oneng2Changed();
    partial void Oneng3Changing(string value);
    partial void Oneng3Changed();
    partial void OnactiveChanging(System.Nullable<bool> value);
    partial void OnactiveChanged();
    #endregion
		
		public EngResult()
		{
			this._Image = default(EntityRef<Image>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_engId", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string engId
		{
			get
			{
				return this._engId;
			}
			set
			{
				if ((this._engId != value))
				{
					if (this._Image.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnengIdChanging(value);
					this.SendPropertyChanging();
					this._engId = value;
					this.SendPropertyChanged("engId");
					this.OnengIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_eng1", DbType="VarChar(50)")]
		public string eng1
		{
			get
			{
				return this._eng1;
			}
			set
			{
				if ((this._eng1 != value))
				{
					this.Oneng1Changing(value);
					this.SendPropertyChanging();
					this._eng1 = value;
					this.SendPropertyChanged("eng1");
					this.Oneng1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_eng2", DbType="VarChar(50)")]
		public string eng2
		{
			get
			{
				return this._eng2;
			}
			set
			{
				if ((this._eng2 != value))
				{
					this.Oneng2Changing(value);
					this.SendPropertyChanging();
					this._eng2 = value;
					this.SendPropertyChanged("eng2");
					this.Oneng2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_eng3", DbType="VarChar(50)")]
		public string eng3
		{
			get
			{
				return this._eng3;
			}
			set
			{
				if ((this._eng3 != value))
				{
					this.Oneng3Changing(value);
					this.SendPropertyChanging();
					this._eng3 = value;
					this.SendPropertyChanged("eng3");
					this.Oneng3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit")]
		public System.Nullable<bool> active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Image_EngResult", Storage="_Image", ThisKey="engId", OtherKey="imageId", IsForeignKey=true)]
		public Image Image
		{
			get
			{
				return this._Image.Entity;
			}
			set
			{
				Image previousValue = this._Image.Entity;
				if (((previousValue != value) 
							|| (this._Image.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Image.Entity = null;
						previousValue.EngResult = null;
					}
					this._Image.Entity = value;
					if ((value != null))
					{
						value.EngResult = this;
						this._engId = value.imageId;
					}
					else
					{
						this._engId = default(string);
					}
					this.SendPropertyChanged("Image");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Image")]
	public partial class Image : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _imageId;
		
		private string _imageName;
		
		private System.Nullable<double> _timeShoot;
		
		private string _userId;
		
		private System.Nullable<bool> _active;
		
		private EntityRef<EngResult> _EngResult;
		
		private EntityRef<VieResult> _VieResult;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnimageIdChanging(string value);
    partial void OnimageIdChanged();
    partial void OnimageNameChanging(string value);
    partial void OnimageNameChanged();
    partial void OntimeShootChanging(System.Nullable<double> value);
    partial void OntimeShootChanged();
    partial void OnuserIdChanging(string value);
    partial void OnuserIdChanged();
    partial void OnactiveChanging(System.Nullable<bool> value);
    partial void OnactiveChanged();
    #endregion
		
		public Image()
		{
			this._EngResult = default(EntityRef<EngResult>);
			this._VieResult = default(EntityRef<VieResult>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_imageId", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string imageId
		{
			get
			{
				return this._imageId;
			}
			set
			{
				if ((this._imageId != value))
				{
					this.OnimageIdChanging(value);
					this.SendPropertyChanging();
					this._imageId = value;
					this.SendPropertyChanged("imageId");
					this.OnimageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_imageName", DbType="VarChar(50)")]
		public string imageName
		{
			get
			{
				return this._imageName;
			}
			set
			{
				if ((this._imageName != value))
				{
					this.OnimageNameChanging(value);
					this.SendPropertyChanging();
					this._imageName = value;
					this.SendPropertyChanged("imageName");
					this.OnimageNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timeShoot", DbType="Float")]
		public System.Nullable<double> timeShoot
		{
			get
			{
				return this._timeShoot;
			}
			set
			{
				if ((this._timeShoot != value))
				{
					this.OntimeShootChanging(value);
					this.SendPropertyChanging();
					this._timeShoot = value;
					this.SendPropertyChanged("timeShoot");
					this.OntimeShootChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="VarChar(50)")]
		public string userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit")]
		public System.Nullable<bool> active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Image_EngResult", Storage="_EngResult", ThisKey="imageId", OtherKey="engId", IsUnique=true, IsForeignKey=false)]
		public EngResult EngResult
		{
			get
			{
				return this._EngResult.Entity;
			}
			set
			{
				EngResult previousValue = this._EngResult.Entity;
				if (((previousValue != value) 
							|| (this._EngResult.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EngResult.Entity = null;
						previousValue.Image = null;
					}
					this._EngResult.Entity = value;
					if ((value != null))
					{
						value.Image = this;
					}
					this.SendPropertyChanged("EngResult");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Image_VieResult", Storage="_VieResult", ThisKey="imageId", OtherKey="vieId", IsUnique=true, IsForeignKey=false)]
		public VieResult VieResult
		{
			get
			{
				return this._VieResult.Entity;
			}
			set
			{
				VieResult previousValue = this._VieResult.Entity;
				if (((previousValue != value) 
							|| (this._VieResult.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VieResult.Entity = null;
						previousValue.Image = null;
					}
					this._VieResult.Entity = value;
					if ((value != null))
					{
						value.Image = this;
					}
					this.SendPropertyChanged("VieResult");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Image", Storage="_User", ThisKey="userId", OtherKey="userId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Images.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Images.Add(this);
						this._userId = value.userId;
					}
					else
					{
						this._userId = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _userId;
		
		private string _userName;
		
		private string _password;
		
		private System.Nullable<System.DateTime> _dob;
		
		private string _address;
		
		private System.Nullable<bool> _active;
		
		private EntitySet<Image> _Images;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserIdChanging(string value);
    partial void OnuserIdChanged();
    partial void OnuserNameChanging(string value);
    partial void OnuserNameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OndobChanging(System.Nullable<System.DateTime> value);
    partial void OndobChanged();
    partial void OnaddressChanging(string value);
    partial void OnaddressChanged();
    partial void OnactiveChanging(System.Nullable<bool> value);
    partial void OnactiveChanged();
    #endregion
		
		public User()
		{
			this._Images = new EntitySet<Image>(new Action<Image>(this.attach_Images), new Action<Image>(this.detach_Images));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userName", DbType="VarChar(50)")]
		public string userName
		{
			get
			{
				return this._userName;
			}
			set
			{
				if ((this._userName != value))
				{
					this.OnuserNameChanging(value);
					this.SendPropertyChanging();
					this._userName = value;
					this.SendPropertyChanged("userName");
					this.OnuserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="NVarChar(500)")]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dob", DbType="Date")]
		public System.Nullable<System.DateTime> dob
		{
			get
			{
				return this._dob;
			}
			set
			{
				if ((this._dob != value))
				{
					this.OndobChanging(value);
					this.SendPropertyChanging();
					this._dob = value;
					this.SendPropertyChanged("dob");
					this.OndobChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address", DbType="NVarChar(100)")]
		public string address
		{
			get
			{
				return this._address;
			}
			set
			{
				if ((this._address != value))
				{
					this.OnaddressChanging(value);
					this.SendPropertyChanging();
					this._address = value;
					this.SendPropertyChanged("address");
					this.OnaddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit")]
		public System.Nullable<bool> active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Image", Storage="_Images", ThisKey="userId", OtherKey="userId")]
		public EntitySet<Image> Images
		{
			get
			{
				return this._Images;
			}
			set
			{
				this._Images.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Images(Image entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Images(Image entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VieResult")]
	public partial class VieResult : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _vieId;
		
		private string _vie1;
		
		private string _vie2;
		
		private string _vie3;
		
		private System.Nullable<bool> _active;
		
		private EntityRef<Image> _Image;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnvieIdChanging(string value);
    partial void OnvieIdChanged();
    partial void Onvie1Changing(string value);
    partial void Onvie1Changed();
    partial void Onvie2Changing(string value);
    partial void Onvie2Changed();
    partial void Onvie3Changing(string value);
    partial void Onvie3Changed();
    partial void OnactiveChanging(System.Nullable<bool> value);
    partial void OnactiveChanged();
    #endregion
		
		public VieResult()
		{
			this._Image = default(EntityRef<Image>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vieId", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string vieId
		{
			get
			{
				return this._vieId;
			}
			set
			{
				if ((this._vieId != value))
				{
					if (this._Image.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnvieIdChanging(value);
					this.SendPropertyChanging();
					this._vieId = value;
					this.SendPropertyChanged("vieId");
					this.OnvieIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vie1", DbType="VarChar(50)")]
		public string vie1
		{
			get
			{
				return this._vie1;
			}
			set
			{
				if ((this._vie1 != value))
				{
					this.Onvie1Changing(value);
					this.SendPropertyChanging();
					this._vie1 = value;
					this.SendPropertyChanged("vie1");
					this.Onvie1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vie2", DbType="VarChar(50)")]
		public string vie2
		{
			get
			{
				return this._vie2;
			}
			set
			{
				if ((this._vie2 != value))
				{
					this.Onvie2Changing(value);
					this.SendPropertyChanging();
					this._vie2 = value;
					this.SendPropertyChanged("vie2");
					this.Onvie2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vie3", DbType="VarChar(50)")]
		public string vie3
		{
			get
			{
				return this._vie3;
			}
			set
			{
				if ((this._vie3 != value))
				{
					this.Onvie3Changing(value);
					this.SendPropertyChanging();
					this._vie3 = value;
					this.SendPropertyChanged("vie3");
					this.Onvie3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit")]
		public System.Nullable<bool> active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Image_VieResult", Storage="_Image", ThisKey="vieId", OtherKey="imageId", IsForeignKey=true)]
		public Image Image
		{
			get
			{
				return this._Image.Entity;
			}
			set
			{
				Image previousValue = this._Image.Entity;
				if (((previousValue != value) 
							|| (this._Image.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Image.Entity = null;
						previousValue.VieResult = null;
					}
					this._Image.Entity = value;
					if ((value != null))
					{
						value.VieResult = this;
						this._vieId = value.imageId;
					}
					else
					{
						this._vieId = default(string);
					}
					this.SendPropertyChanged("Image");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
